apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
if (rootProject.ext.is_renetik_library_release) {
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'
}

android {
    namespace rootProject.ext.namespace
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin { jvmToolchain(17) }
    compileSdk project.properties.sdk_version
    defaultConfig {
        minSdkVersion project.properties.min_sdk_version
        targetSdkVersion project.properties.sdk_version
    }
    testOptions {
        unitTests.all {
            testLogging {
                outputs.upToDateWhen { false }
                events "started", "skipped", "failed", "passed", "standardError"
                exceptionFormat "full" //short
                showCauses true
                showExceptions true
                showStackTraces true
                showStandardStreams true
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
}
if (rootProject.ext.is_renetik_library_release) {
//    tasks.register('sourceJar', Jar) {
//        archiveClassifier.set('sources')
//        from android.sourceSets.main.java.srcDirs
//    }
//    afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId 'com.renetik.library'
                artifactId project.name
                version = project.renetik_library_version
                artifact sourceJar {
                    classifier 'sources'
                    from android.sourceSets.main.java.srcDirs
                }

                artifact dokkaHtml.outputDirectory
            }
        }
    }
//    }
    dokkaHtml {
        outputDirectory = file("${projectDir}/../docs")
        dokkaSourceSets { configureEach { includes.from("../README.md") } }
    }
}